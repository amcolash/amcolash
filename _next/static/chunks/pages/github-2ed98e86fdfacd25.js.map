{"version":3,"file":"static/chunks/pages/github-2ed98e86fdfacd25.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,UACA,WACE,OAAO,EAAQ,U,mKCIvB,SAASC,EAAKC,GACZ,OACE,UAACC,MAAG,CAACC,MAAO,CAAEC,aAAc,QAAqB,OAAbC,EAAAA,GAAa,a,WAC/C,UAACH,MAAG,CAACC,MAAO,CAAEG,QAAS,OAAQC,WAAY,Y,WACzC,SAACC,IAAC,CAACC,KAAMR,EAAMS,KAAKC,SAAUC,OAAO,S,SAClCX,EAAMS,KAAKG,OAEbZ,EAAMS,KAAKI,OAAQ,SAACC,EAAAA,EAAS,CAACC,IAAI,OAAOb,MAAO,CAAEc,WAAY,MAC/D,UAACC,OAAI,CAACf,MAAO,CAAEc,WAAY,EAAGE,SAAU,S,UAAW,YAASC,EAAAA,EAAAA,GAAe,IAAIC,KAAKpB,EAAMS,KAAKY,WAAY,IAAID,MAAQ,eAEzH,SAACnB,MAAG,C,SAAED,EAAMS,KAAKa,iBAKvB,SAASC,EAAM,G,IAAA,IAAEC,KACSC,GAAAA,EAAAA,EAAAA,IAAO,6EAAkF,OAALD,IAApGf,EAAgBgB,EAAhBhB,KAER,OAFwBgB,EAAVC,QAEG,OAAJjB,QAAI,IAAJA,OAAAA,EAAAA,EAAMkB,SACD,IAATH,GACL,UAACvB,MAAG,CAACC,MAAO,CAAEG,QAAS,Q,UAAU,wDACqB,SAACuB,EAAAA,EAAK,CAAC1B,MAAO,CAAEc,WAAY,SAEhF,KACDP,EAEEA,EAAKoB,KAAI,SAACC,G,OAAM,SAAC/B,EAAI,CAACU,KAAMqB,GAAQA,EAAEC,OAFlB,IAATP,GAAa,SAACvB,MAAG,C,SAAC,eAAmB,KAKzD,SAAS+B,IACP,IAAM,GAAWP,EAAAA,EAAAA,IAAQ,yCAAjBhB,KACR,OAAO,UAACwB,KAAE,C,UAAC,mBAAiBxB,IAASA,EAAKkB,SAAW,IAAsB,OAAlBlB,EAAKyB,aAAa,QAG9D,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,KAEjB,OACE,SAACC,EAAAA,GAAS,CACRC,MAAO,CACLC,QAAS,SAACC,EAAUC,G,OAASC,MAAMF,EAAUC,GAAME,MAAK,SAACC,G,OAAQA,EAAIC,WACrEC,aAAc,SAACrB,EAAOsB,EAAKC,EAAQC,EAAY,GAAY,EAAVC,a,UAKnD,UAAClD,MAAG,C,WACF,SAACgC,KAAE,C,SAAC,sBACJ,SAACmB,EAAAA,EAAc,CACbC,SAAS,WACTC,YAAalB,EAASG,MAAQ,OAAS,QACvCgB,MAAO,CACLC,KAAM,CAAC,OAAQ,WACfC,MAAO,CAAC,UAAW,YAErBvD,MAAO,CAAEC,aAAc,GAAIuD,QAAS,OAAQC,OAAQ,iBAAkBC,aAAc,MAItF,SAAC5B,EAAU,IACV,CAAC,EAAG,GAAGH,KAAI,SAACL,G,OACX,SAACD,EAAK,CAACC,KAAMA,GAAWA,c","sources":["webpack://_N_E/?50d7","webpack://_N_E/./pages/github.jsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/github\",\n      function () {\n        return require(\"private-next-pages/github.jsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/github\"])\n      });\n    }\n  ","import { formatDistance } from 'date-fns';\nimport { Frown, GitBranch } from 'react-feather';\nimport GitHubCalendar from 'react-github-calendar';\nimport useSWR, { SWRConfig } from 'swr';\nimport useDarkMode from 'use-dark-mode';\n\nimport { Colors, OuterPadding } from '../lib/constants';\n\nfunction Repo(props) {\n  return (\n    <div style={{ marginBottom: `calc(${OuterPadding} / 1.25)` }}>\n      <div style={{ display: 'flex', alignItems: 'flex-end' }}>\n        <a href={props.data.html_url} target=\"_blank\">\n          {props.data.name}\n        </a>\n        {props.data.fork && <GitBranch alt=\"fork\" style={{ marginLeft: 8 }} />}\n        <span style={{ marginLeft: 8, fontSize: '0.7em' }}>(Pushed {formatDistance(new Date(props.data.pushed_at), new Date())} ago)</span>\n      </div>\n      <div>{props.data.description}</div>\n    </div>\n  );\n}\n\nfunction Repos({ page }) {\n  const { data, error } = useSWR(`https://api.github.com/users/amcolash/repos?sort=pushed&per_page=100&page=${page}`);\n\n  if (error || data?.message)\n    return page === 1 ? (\n      <div style={{ display: 'flex' }}>\n        Looks like we can't access the Github API right now <Frown style={{ marginLeft: 10 }} />\n      </div>\n    ) : null;\n  if (!data) return page === 1 ? <div>Loading...</div> : null;\n\n  return data.map((r) => <Repo data={r} key={r.id} />);\n}\n\nfunction RepoHeader() {\n  const { data } = useSWR(`https://api.github.com/users/amcolash`);\n  return <h3>My Repositories {data && !data.message && `(${data.public_repos})`}</h3>;\n}\n\nexport default function Github() {\n  const darkMode = useDarkMode();\n\n  return (\n    <SWRConfig\n      value={{\n        fetcher: (resource, init) => fetch(resource, init).then((res) => res.json()),\n        onErrorRetry: (error, key, config, revalidate, { retryCount }) => {\n          if (retryCount > 1) return;\n        },\n      }}\n    >\n      <div>\n        <h3>My Contributions</h3>\n        <GitHubCalendar\n          username=\"amcolash\"\n          colorScheme={darkMode.value ? 'dark' : 'light'}\n          theme={{\n            dark: ['#333', '#419e59'],\n            light: ['#dadada', '#419e59'],\n          }}\n          style={{ marginBottom: 40, padding: '1rem', border: '1px solid #888', borderRadius: 5 }}\n        />\n\n        {/* Get all repositories. Since I am not at 200 total yet, this will be more than sufficient for now */}\n        <RepoHeader />\n        {[1, 2].map((page) => (\n          <Repos page={page} key={page} />\n        ))}\n      </div>\n    </SWRConfig>\n  );\n}\n"],"names":["window","__NEXT_P","push","Repo","props","div","style","marginBottom","OuterPadding","display","alignItems","a","href","data","html_url","target","name","fork","GitBranch","alt","marginLeft","span","fontSize","formatDistance","Date","pushed_at","description","Repos","page","useSWR","error","message","Frown","map","r","id","RepoHeader","h3","public_repos","Github","darkMode","useDarkMode","SWRConfig","value","fetcher","resource","init","fetch","then","res","json","onErrorRetry","key","config","revalidate","retryCount","GitHubCalendar","username","colorScheme","theme","dark","light","padding","border","borderRadius"],"sourceRoot":""}