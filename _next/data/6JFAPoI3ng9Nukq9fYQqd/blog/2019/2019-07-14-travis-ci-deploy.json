{"pageProps":{"post":{"title":"Deploying with Travis CI","date":"2019-07-14T23:28:02.000Z","slug":"2019/2019-07-14-travis-ci-deploy","content":"<h2>Hello Travis!</h2>\n<p>I forgot to write a quick post about setting up <a href=\"http://travis-ci.org\">Travis CI</a> for building my website. After the investigations into rewriting <a href=\"https://amcolash.com/2019/07/02/if-it-aint-broke-dont-fix-it.html\">here</a> and <a href=\"https://amcolash.com/2019/06/18/rewriting-my-website.html\">here</a>, I decided that it was too much work and I chose to stick with jekyll.</p>\n<p>One of the pain points of working with this system is that since I am using some custom plugins, I am unable to have github pages auto-deploy my website. This means that to get an auto-deployed website, I need to go through a different 3rd party. Luckily this is where travis comes to the rescue!</p>\n<p>Travis CI is a free CI/CD environment for open source projects and allows you to build and deploy code based on various triggers. For me, a simple push to the <code>master</code> branch of my website <a href=\"https://github.com/amcolash/amcolash\">Github Repo</a> will kick off a build. If all goes well, it then pushes that build to the <code>gh-pages</code> branch of my site. Using this configuration significantly reduced the complexity of updating my website and means that I do not need to remember to build before committing.</p>\n<h2>Getting Things Running</h2>\n<p>I found some great sources of help on the internet, but of course customized my build to my tastes. One interesting pain-point that I ran into was getting github submodules checked out. I have a submodule that contains my current(ish) resume which I need to grab when building my site. I had to do some trickery to get that cloned since it is set up with an <code>ssh</code>-styled remote url. This is an issue since I prefer to use <code>ssh</code> to push to github instead of the <code>https</code> protocol (so I don't need to always specify my password). Based off of a conversation <a href=\"https://github.com/algolia/examples/issues/24\">here</a>, others were having a similar issue.</p>\n<p>The solution is fairly simple, just use <code>sed</code> to replace <code>git@github.com</code> with <code>https://github.com</code> in the <code>.gitmodules</code> file and then manually grab the module.</p>\n<pre><code class=\"language-yaml\"># Handle git submodules yourself, based off of https://github.com/algolia/examples/issues/24\ngit:\n  submodules: false\n# Use sed to replace the SSH URL with the public URL, then initialize submodules\nbefore_install:\n  - sed -i 's/git@github.com:/https:\\/\\/github.com\\//' .gitmodules\n  - git submodule update --init --recursive\n</code></pre>\n<p>After getting the submodule working properly, the only other bits were getting some caching in place and setting up a github token to push to the repository. This is then set up as an environment variable for the build and the <code>.travis.yaml</code> file has access to it.</p>\n<p>It is so nice to be able to have my blog now updated whenever I write a post. Oh, and I also get to use a fancy badge now so that I can see if things are working properly :grin:</p>\n<p><a href=\"https://travis-ci.org/amcolash/amcolash\"><img src=\"https://img.shields.io/travis/amcolash/amcolash.svg\" alt=\"Travis (.org)\"></a></p>\n<h2>Final <code>.travis.yml</code> Configuration</h2>\n<p>Here you can see the final <code>.travis.yml</code> file. What a simple little bit of code and a few checkboxes to get it all running! Travis is really fast and really worth it whether you have a public or private repo and can get you on the CI/CD pipeline quickly and painlessly.</p>\n<pre><code class=\"language-yaml\">language: ruby\ncache: bundler # caching bundler gem packages will speed up build\n\nbranches:\n  only:\n    - master\n\nscript:\n  - JEKYLL_ENV=production bundle exec jekyll build --destination docs\n\ndeploy:\n  provider: pages\n  local-dir: ./docs\n  skip-cleanup: true\n  github-token: $GITHUB_TOKEN\n  keep-history: true\n\n############### Git Submodule (for resume) Hack ###############\n\n# Handle git submodules yourself, based off of https://github.com/algolia/examples/issues/24\ngit:\n  submodules: false\n# Use sed to replace the SSH URL with the public URL, then initialize submodules\nbefore_install:\n  - sed -i 's/git@github.com:/https:\\/\\/github.com\\//' .gitmodules\n  - git submodule update --init --recursive\n</code></pre>\n"}},"__N_SSG":true}